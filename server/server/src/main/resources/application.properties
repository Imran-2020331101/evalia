# Application Configuration
spring.application.name=evalia-server
server.port=8080

# MongoDB Configuration (MongoDB Atlas Cluster)
spring.data.mongodb.uri=mongodb+srv://root:root@cluster0.e0tnofj.mongodb.net/evalia?retryWrites=true&w=majority&appName=Cluster0

# Logging configuration
logging.level.org.springframework.security=DEBUG
logging.level.org.springframework.security.oauth2=DEBUG
logging.level.com.example.server.security=DEBUG

# Optional MongoDB Connection Settings
#spring.data.mongodb.connection-timeout=2000
#spring.data.mongodb.socket-timeout=3000
#spring.data.mongodb.min-pool-size=5
#spring.data.mongodb.max-pool-size=50

# CORS Configuration
spring.mvc.cors.allowed-origins=http://localhost:3000,http://localhost:3001
spring.mvc.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.mvc.cors.allowed-headers=*
spring.mvc.cors.allow-credentials=true

# JWT Configuration
jwt.secret=evaliaSecretKey123!ForJWTTokenAuthenticationAndAuthorization2024
jwt.expiration=86400000

# Email Configuration (Gmail SMTP)
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USERNAME=evalia.apostrophe@gmail.com
EMAIL_PASSWORD=grri firk ojdi btjl
EMAIL_SMTP_AUTH=true
EMAIL_SMTP_STARTTLS=true
EMAIL_SMTP_SSL_TRUST=smtp.gmail.com

# GitHub OAuth2 Configuration
spring.security.oauth2.client.registration.github.client-id=Ov23lilygmp30iySB7fR
spring.security.oauth2.client.registration.github.client-secret=b568bfff804e1d214a16f4fab7663116190800c4
spring.security.oauth2.client.registration.github.redirect-uri=http://localhost:8080/login/oauth2/code/github
spring.security.oauth2.client.registration.github.scope=user:email,read:user

# File Upload Configuration
spring.servlet.multipart.enabled=true
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB

# OpenAPI/Swagger Configuration
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.enabled=true
springdoc.swagger-ui.operationsSorter=method
springdoc.swagger-ui.tagsSorter=alpha
springdoc.swagger-ui.tryItOutEnabled=true
springdoc.packages-to-scan=com.example.server
springdoc.paths-to-match=/api/**

# Google OAuth2 Configuration
spring.security.oauth2.client.registration.google.client-id=720090746158-ggbiutcq7qcshbe8rhhad7cuesajhdkn.apps.googleusercontent.com
spring.security.oauth2.client.registration.google.client-secret=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
spring.security.oauth2.client.registration.google.scope=openid,profile,email
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:8080/login/oauth2/code/google

# Note: Provider configuration is automatically handled by Spring Boot for Google

# OpenFeign Configuration
feign.client.config.default.loggerLevel=full
feign.client.config.default.decode404=true
feign.client.config.default.connectTimeout=10000
feign.client.config.default.readTimeout=30000